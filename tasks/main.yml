---

- name: initialize uwsgi variables
  set_fact:
    _uwsgi_service_name: >-
      {{ uwsgi_service_name |
      default(uwsgi_default_service_names[ansible_pkg_mgr] |
      default(''), true) }}
    _uwsgi_use_upstart: >-
      {{ uwsgi_use_upstart |
      default(
        uwsgi_install != 'pkg' and not (
          (ansible_os_family == 'RedHat' and ansible_distribution_major_version is version_compare('7', '>=')) or
          (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version_compare('18', '>='))
        )
      ) | bool }}
    _uwsgi_use_systemd: >-
      {{ uwsgi_use_systemd |
      default(
        uwsgi_install != 'pkg' and (
          (ansible_os_family == 'RedHat' and ansible_distribution_major_version is version_compare('7', '>=')) or
          (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version_compare('18', '>='))
        )
      ) | bool }}
    _uwsgi_bin: "{{ uwsgi_bin | default('', true) }}"

- name: package installation isn't supported on EL 8
  fail:
    msg: uwsgi_install == 'pkg' is not supported on EL 8
  when: uwsgi_install == 'pkg' and ansible_os_family == 'RedHat' and ansible_distribution_major_version is version_compare('8', '==')

- name: check that uwsgi service name is defined
  fail:
    msg: uwsgi_service_name must be defined
  when: _uwsgi_service_name == ''

- name: check that uwsgi conf path is defined
  fail:
    msg: uwsgi_conf_path must be defined
  when: uwsgi_conf_path == ''

- name: check that uwsgi vassal path is defined
  fail:
    msg: uwsgi_vassal_path must be defined
  when: uwsgi_vassal_path == ''

- name: check that only upstart or systemd will be used
  fail:
    msg: only one of uwsgi_use_upstart or uwsgi_use_systemd should be enabled
  when: _uwsgi_use_upstart and _uwsgi_use_systemd

- name: install uwsgi packages / dependencies via system package manager
  package:
    name: "{{ uwsgi_os_packages }}"
    state: "present"
  when: uwsgi_install != ''
  register: _uwsgi_os_packages_result

- name: create systemd tempfiles if using systemd and uwsgi packages were just installed
  command: systemd-tmpfiles --create
  when: uwsgi_install == 'pkg' and _uwsgi_os_packages_result is changed and ansible_service_mgr == 'systemd'

- name: install uwsgi packages via pip
  pip:
    name: "{{ item.name | default(item) }}"
    version: "{{ item.version | default(uwsgi_version, true) | default(omit, true) }}"
    virtualenv: "{{ uwsgi_virtualenv | default(omit, true) }}"
    executable: "{{ uwsgi_pip_executable | default(omit, true) }}"
  with_items: "{{ uwsgi_pip_packages }}"
  when: uwsgi_install == 'pip'

- name: create group for running uwsgi
  group:
    name: "{{ uwsgi_user_group.group }}"
    system: "{{ uwsgi_user_group.system | default(true) }}"
  when: uwsgi_install != 'pkg' and uwsgi_user_group.group | default('')

- name: create user for running uwsgi
  user:
    name: "{{ uwsgi_user_group.name }}"
    comment: "{{ uwsgi_user_group.comment | default(omit) }}"
    group: "{{ uwsgi_user_group.group | default(omit) }}"
    home: "{{ uwsgi_user_group.home | default(omit) }}"
    shell: "{{ uwsgi_user_group.shell | default(omit) }}"
    system: "{{ uwsgi_user_group.system | default(true) }}"
  when: uwsgi_install != 'pkg' and uwsgi_user_group.name | default('')

- name: install upstart packages for running uwsgi
  package:
    name: "{{ uwsgi_upstart_packages }}"
    state: present
  when: _uwsgi_use_upstart
  register: _uwsgi_upstart_install_result

- name: refresh facts if upstart was just installed to update ansible_service_mgr
  setup:
  when: _uwsgi_use_upstart and _uwsgi_upstart_install_result is changed

- name: set uwsgi binary path when using virtualenv
  set_fact:
    _uwsgi_bin: "{{ _uwsgi_bin|default(uwsgi_virtualenv + '/bin/uwsgi', true) }}"
  when: (_uwsgi_use_upstart or _uwsgi_use_systemd) and uwsgi_install == 'pip' and uwsgi_virtualenv

- name: find uwsgi binary path if not provided
  command: which uwsgi
  when: (_uwsgi_use_upstart or _uwsgi_use_systemd) and not _uwsgi_bin
  changed_when: false
  failed_when: _uwsgi_bin_which.rc != 0 or not _uwsgi_bin_which.stdout
  register: _uwsgi_bin_which

- name: update uwsgi binary path
  set_fact:
    _uwsgi_bin: "{{ _uwsgi_bin_which.stdout }}"
  when: (_uwsgi_use_upstart or _uwsgi_use_systemd) and not _uwsgi_bin

- name: add upstart uwsgi configuration
  template:
    src: "{{ uwsgi_upstart_template }}"
    dest: "{{ uwsgi_upstart_path }}"
  when: _uwsgi_use_upstart
  register: _uwsgi_upstart_config_result
  notify:
    - restart uwsgi

- name: reload upstart configuration if upstart installed or uwsgi conf changed
  command: initctl reload-configuration
  when: _uwsgi_use_upstart and (_uwsgi_upstart_install_result is changed or _uwsgi_upstart_config_result is changed)

- name: add systemd uwsgi configuration
  template:
    src: "{{ uwsgi_systemd_template }}"
    dest: "{{ uwsgi_systemd_path }}"
  when: _uwsgi_use_systemd
  register: _uwsgi_systemd_config_result
  notify:
    - restart uwsgi

- name: reload systemd daemon if uwsgi systemd conf changed
  systemd:
    daemon_reload: true
  when: _uwsgi_use_systemd and _uwsgi_systemd_config_result is changed

- name: make sure uwsgi conf directory exists
  file:
    path: "{{ uwsgi_conf_path | dirname }}"
    state: directory
  when: uwsgi_conf_template != ''

- name: add uwsgi conf if not present
  template:
    src: "{{ uwsgi_conf_template }}"
    dest: "{{ uwsgi_conf_path }}"
    force: "{{ uwsgi_conf_force }}"
  when: uwsgi_conf_template != ''

- name: configure whether uwsgi emperor runs in tyrant mode
  lineinfile:
    dest: "{{ uwsgi_conf_path }}"
    regexp: '^#*?\s*?{{ item.name }}\s*?='
    line: "{{ item.name }} = {{ item.value }}"
  with_items:
    - name: emperor-tyrant
      value: "{{ uwsgi_emperor_tyrant | bool }}"
    - name: cap
      value: "setgid,setuid"
  notify:
    - restart uwsgi

- name: make sure uwsgi vassal path exists
  file:
    path: "{{ uwsgi_vassal_path }}"
    state: directory

- name: configure any vassals defined
  template:
    src: uwsgi-vassal.ini.j2
    dest: "{{ uwsgi_vassal_path }}/{{ item.name | mandatory }}.ini"
    owner: "{{ uwsgi_emperor_tyrant | ternary(item.uid | default(omit), omit) }}"
    group: "{{ uwsgi_emperor_tyrant | ternary(item.gid | default(omit), omit) }}"
  with_items: "{{ uwsgi_vassals | default([]) }}"

- name: remove any vassals no longer needed
  file:
    path: "{{ uwsgi_vassal_path }}/{{ item }}.ini"
    state: absent
  with_items: "{{ uwsgi_vassals_to_remove | default([]) }}"

- name: update uwsgi selinux fcontext
  sefcontext:
    target: "{{ _uwsgi_bin }}"
    setype: bin_t
    state: present
  when: ansible_selinux | default(false) and uwsgi_selinux | default(false)

- name: apply selinux fcontext
  command: "/usr/sbin/restorecon -irv {{ _uwsgi_bin }}"
  when: ansible_selinux | default(false) and uwsgi_selinux | default(false)

- name: start and enable the uwsgi service
  service:
    name: "{{ _uwsgi_service_name }}"
    state: started
    enabled: true
